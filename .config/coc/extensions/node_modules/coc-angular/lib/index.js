"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var coc_nvim_1 = require("coc.nvim");
function activate(context) {
    var config = coc_nvim_1.workspace.getConfiguration('angular');
    var isEnableDebug = config.get('angular.debug');
    // The server is implemented in node
    var serverModule = require.resolve('angular-lsp-service');
    var options = {
        module: serverModule,
        transport: coc_nvim_1.TransportKind.ipc,
        options: {
            env: {
                // Force TypeScript to use the non-polling version of the file watchers.
                TSC_NONPOLLING_WATCHER: true,
            },
        },
    };
    // If the extension is launched in debug mode then the debug server options are used
    // Otherwise the run options are used
    var serverOptions = {
        run: options,
        debug: options
    };
    // The debug options for the server
    if (isEnableDebug) {
        serverOptions.debug.options = {
            execArgv: [
                "--nolazy",
                "--debug=6009"
            ]
        };
    }
    // Options to control the language client
    var clientOptions = {
        // Register the server for Angular templates
        documentSelector: ['ng-template', 'html', 'typescript'],
        // Information in the TypeScript project is necessary to generate Angular template completions
        synchronize: {
            fileEvents: [
                coc_nvim_1.workspace.createFileSystemWatcher('**/tsconfig.json'),
                coc_nvim_1.workspace.createFileSystemWatcher('**/*.ts')
            ]
        },
        // Don't let our output console pop open
        revealOutputChannelOn: coc_nvim_1.RevealOutputChannelOn.Never
    };
    // Create the language client and start the client.
    var client = new coc_nvim_1.LanguageClient('angularls', 'Angular Language Service', serverOptions, clientOptions);
    // Push the disposable to the context's subscriptions so that the
    // client can be deactivated on extension deactivation
    context.subscriptions.push(coc_nvim_1.services.registLanguageClient(client));
}
exports.activate = activate;
//# sourceMappingURL=index.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const isInsideInterpolation_1 = require("../services/isInsideInterpolation");
const assert = require("assert");
suite('isInsideInterpolation', () => {
    test('{{ }}', () => {
        const nodeText = '{{ }}';
        assert.ok(!isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: true }, nodeText, 0));
        assert.ok(!isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: true }, nodeText, 1));
        assert.ok(isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: true }, nodeText, 2));
        assert.ok(isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: true }, nodeText, 3));
        assert.ok(!isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: true }, nodeText, 4));
        assert.ok(!isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: true }, nodeText, 5));
    });
    test('{{ f }}', () => {
        const nodeText = '{{ f }}';
        assert.ok(!isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: true }, nodeText, 0));
        assert.ok(!isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: true }, nodeText, 1));
        assert.ok(isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: true }, nodeText, 2));
        assert.ok(isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: true }, nodeText, 3));
        assert.ok(isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: true }, nodeText, 4));
        assert.ok(isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: true }, nodeText, 5));
        assert.ok(!isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: true }, nodeText, 6));
        assert.ok(!isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: true }, nodeText, 7));
    });
    test('v-if=""', () => {
        const nodeText = '<div v-if=""></div>';
        const arr = [...Array(nodeText.length).keys()];
        assert.ok(isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: false }, nodeText, 11));
        for (const i of arr) {
            if (i !== 11) {
                assert.ok(!isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: false }, nodeText, i));
            }
        }
    });
    test('v-if="x"', () => {
        const nodeText = '<div v-if="x"></div>';
        const arr = [...Array(nodeText.length).keys()];
        assert.ok(isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: false }, nodeText, 11));
        assert.ok(isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: false }, nodeText, 12));
        for (const i of arr) {
            if (i !== 11 && i !== 12) {
                assert.ok(!isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: false }, nodeText, i));
            }
        }
    });
    test(':foo=""', () => {
        const nodeText = '<div :foo=""></div>';
        const arr = [...Array(nodeText.length).keys()];
        assert.ok(isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: false }, nodeText, 11));
        for (const i of arr) {
            if (i !== 11) {
                assert.ok(!isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: false }, nodeText, i));
            }
        }
    });
    test(':foo="x"', () => {
        const nodeText = '<div :foo="x"></div>';
        const arr = [...Array(nodeText.length).keys()];
        assert.ok(isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: false }, nodeText, 11));
        assert.ok(isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: false }, nodeText, 12));
        for (const i of arr) {
            if (i !== 11 && i !== 12) {
                assert.ok(!isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: false }, nodeText, i));
            }
        }
    });
    test('@foo=""', () => {
        const nodeText = '<div @foo=""></div>';
        const arr = [...Array(nodeText.length).keys()];
        assert.ok(isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: false }, nodeText, 11));
        for (const i of arr) {
            if (i !== 11) {
                assert.ok(!isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: false }, nodeText, i));
            }
        }
    });
    test('@foo="x"', () => {
        const nodeText = '<div @foo="x"></div>';
        const arr = [...Array(nodeText.length).keys()];
        assert.ok(isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: false }, nodeText, 11));
        assert.ok(isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: false }, nodeText, 12));
        for (const i of arr) {
            if (i !== 11 && i !== 12) {
                assert.ok(!isInsideInterpolation_1.isInsideInterpolation({ isInterpolation: false }, nodeText, i));
            }
        }
    });
});
//# sourceMappingURL=isInsideInterpolation.test.js.map
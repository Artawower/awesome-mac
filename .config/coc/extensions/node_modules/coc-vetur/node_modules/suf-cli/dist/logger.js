"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.colors = void 0;
var log_1 = require("@sorg/log");
exports.colors = {
    info: '#f64',
    yellow: '#fc2',
    blue: '#08f',
    gray: '#aaa',
    error: '#f00'
};
var loggers = {
    info: {
        styles: [exports.colors.info, exports.colors.yellow]
    },
    error: {
        styles: [{ color: exports.colors.error, bold: true }]
    },
    help: {
        styles: [
            { color: '#72a', background: '#111' },
            { color: '#f23', background: '#222' },
            { color: '#2af', background: '#222' }
        ]
    }
};
var nodeHelpMessage = function (preset, data) {
    if (preset.text) {
        var lines = preset.text.split(/\n/g);
        preset.text = undefined;
        var output = '';
        output += nodeHelpMessage(preset, __assign(__assign({}, data), { rawMessages: ['\n ', ' '] }));
        for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
            var line = lines_1[_i];
            output += nodeHelpMessage(preset, __assign(__assign({}, data), { rawMessages: '\n'.concat(line).split(preset.splitter) }));
        }
        output += nodeHelpMessage(preset, __assign(__assign({}, data), { rawMessages: ['\n ', ''] }));
        return output.replace(/^\n/, '');
    }
    else {
        var messages = [];
        for (var i = 0; i < data.rawMessages.length; i++) {
            messages.push({ message: data.rawMessages[i] });
        }
        var lastIndex = messages.length - 1;
        if (messages.length > 1) {
            var space = preset.firstColumnWidth - messages[0].message.length;
            if (space >= 0) {
                messages[0].message = messages[0].message
                    .replace(/^(\n)?/, '$1 ')
                    .concat(' '.repeat(space));
            }
            var concatenatedMessages = '';
            for (var i = 1; i < messages.length; i++) {
                concatenatedMessages += messages[i].message;
            }
            var endingSpace = preset.secondColumnWidth - (concatenatedMessages.length + (messages.length - 1) * 2);
            if (endingSpace >= 0) {
                messages[lastIndex].message = messages[lastIndex].message.concat(' '.repeat(endingSpace));
            }
        }
        var output = '';
        for (var i = 0; i < messages.length; i++) {
            messages[i].message = messages[i].message.replace(/^(\n)?/, '$1 ');
            output += log_1.styler(messages[i].message.concat('  '), data.styles[i]);
        }
        return output;
    }
};
exports.logger = {
    Log: function (type) {
        var messages = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            messages[_i - 1] = arguments[_i];
        }
        if (type !== 'help') {
            log_1.Log.apply(void 0, messages.map(function (msg, i) { return log_1.styler(msg, loggers[type].styles[i]); }));
        }
        else {
            console.log(nodeHelpMessage({
                text: "    INFO: All arguments can start with - or --, but i would recommend to just use letters.\n    a | all: Calls all modules.\n    b | badges: Calls the badges module.\n    t | ts | d.ts | docs: Calls the tsDoc module.\n    l | licence: Calls the license module.\n    h | help: Displays this Message.",
                splitter: ':',
                firstColumnWidth: 25,
                secondColumnWidth: 90
            }, {
                styles: [
                    { color: '#72a', background: '#111' },
                    { color: '#f23', background: '#222' },
                    { color: '#2af', background: '#222' }
                ],
                rawMessages: []
            }));
        }
    }
};

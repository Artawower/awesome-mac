"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenBadges = void 0;
var fs_1 = require("fs");
var logger_1 = require("./logger");
var utility_marker_1 = require("./utility.marker");
var utility_baseClass_1 = require("./utility.baseClass");
var BADGES = {
    circleci: '/circleci/build/github/<GITHUB>/<REPO>',
    codecov: '/gh/<GITHUB>/<REPO>/branch/master/graph/badge.svg',
    vscV: '/visual-studio-marketplace/v/<VSCODE>',
    vscD: '/visual-studio-marketplace/d/<VSCODE>',
    vscI: '/visual-studio-marketplace/i/<VSCODE>',
    vscR: '/visual-studio-marketplace/r/<VSCODE>',
    min: '/bundlephobia/min/<NAME>',
    minzip: '/bundlephobia/minzip/<NAME>',
    install: '/packagephobia/install/<NAME>',
    publish: '/packagephobia/publish/<NAME>',
    npmV: '/npm/v/<NAME>',
    npmDM: '/npm/dm/<NAME>',
    npmDT: '/npm/dt/<NAME>',
    npmDW: '/npm/dw/<NAME>',
    npmDY: '/npm/dy/<NAME>',
    npmDep: '/npm/dependents/<NAME>',
    npmLicense: '/npm/license/<NAME>',
    npmNode: '/npm/node/<NAME>',
    npmTypes: '/npm/types/<NAME>',
    githubFollowers: '/github/followers/<GITHUB>',
    githubForks: '/github/forks/<GITHUB>/<REPO>',
    githubStars: '/github/stars/<GITHUB>/<REPO>',
    githubIssues: '/github/issues/<GITHUB>/<REPO>',
    githubLastCommit: '/github/last-commit/<GITHUB>/<REPO>',
    badge: '<CUSTOM>'
};
var LINKS = {
    npm: 'https://www.npmjs.com/package/<NAME>',
    github: 'https://github.com/<GITHUB>/<REPO>',
    circleci: 'https://app.circleci.com/github/<GITHUB>/<REPO>/pipelines',
    vscode: 'https://marketplace.visualstudio.com/items?itemName=<VSCODE>',
    bundle: 'https://bundlephobia.com/result?p=<NAME>',
    package: 'https://packagephobia.now.sh/result?p=<NAME>',
    codecov: 'https://codecov.io/gh/<GITHUB>/<REPO>',
    link: '<CUSTOM>'
};
var GenBadges = /** @class */ (function (_super) {
    __extends(GenBadges, _super);
    function GenBadges(STATE) {
        var _this = _super.call(this) || this;
        _this.STATE = STATE;
        _this.run();
        return _this;
    }
    GenBadges.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var CONFIG, generatedBadges, input;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.STATE.getConfig('badges')];
                    case 1:
                        CONFIG = (_a.sent());
                        generatedBadges = this.getBadges(CONFIG);
                        input = utility_marker_1.getMarkedInput(CONFIG.out, 'badges');
                        return [4 /*yield*/, fs_1.promises.writeFile(CONFIG.out, input.replace(utility_marker_1.insertionMarker.regex, utility_marker_1.getGenerated(generatedBadges, 'badges')))];
                    case 2:
                        _a.sent();
                        logger_1.logger.Log('info', "Generated Badges at ", CONFIG.out);
                        if (this._res) {
                            this._res();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    GenBadges.prototype.getBadges = function (CONFIG) {
        var out = '';
        for (var _i = 0, _a = CONFIG.badges; _i < _a.length; _i++) {
            var _badge = _a[_i];
            out += this.addBadge(_badge, CONFIG);
        }
        return out.replace(/^ /, '');
    };
    GenBadges.prototype.addBadge = function (_badge, CONFIG) {
        var customLink = '';
        if (/ link=.+/.test(_badge)) {
            customLink = _badge.replace(/.*?link=([^ ]*) ?.*/, '$1');
        }
        var customBadge = '';
        if (/badge=.+/.test(_badge)) {
            customBadge = _badge.replace(/badge=([^ ]*) ?.*/, '$1');
        }
        var split = _badge.split(' ');
        var type = split[0];
        var link = split[1];
        var params = split[2];
        var baseLink = 'https://img.shields.io';
        switch (type) {
            case 'install':
            case 'npmDep':
            case 'npmNode':
            case 'npmLicense':
                baseLink = 'https://badgen.net';
                break;
            case 'codecov':
                baseLink = 'https://codecov.io';
                break;
        }
        if (BADGES[type] || (customBadge && LINKS[link]) || customLink) {
            return " [![" + (customBadge ? 'Custom' : type) + "](" + (customBadge ? '' : baseLink) + (customBadge ? customBadge : this.replacePlaceholders(CONFIG, BADGES[type])) + (params ? params : '') + ")](" + (customLink ? customLink : this.replacePlaceholders(CONFIG, LINKS[link])) + ")";
        }
        else {
            logger_1.logger.Log('info', "Badge: \"" + split.join(' ') + "\" is Not Valid.");
        }
        return '';
    };
    GenBadges.prototype.replacePlaceholders = function (CONFIG, text) {
        text = text.replace(/<NAME>/g, CONFIG.name);
        text = text.replace(/<GITHUB>/g, CONFIG.github);
        text = text.replace(/<VSCODE>/g, CONFIG.vscode ? CONFIG.vscode : '');
        text = text.replace(/<REPO>/g, CONFIG.repo);
        return text;
    };
    return GenBadges;
}(utility_baseClass_1.BaseCliClass));
exports.GenBadges = GenBadges;

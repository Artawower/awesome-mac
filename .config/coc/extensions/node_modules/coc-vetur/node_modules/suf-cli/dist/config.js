"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateOrUpdateConfig = exports.getConfig = void 0;
var logger_1 = require("./logger");
var fs_1 = require("fs");
var log_1 = require("@sorg/log");
var suf_node_1 = require("suf-node");
var node_fetch_1 = __importDefault(require("node-fetch"));
var CONFIG_PATH = './suf.config.json';
function getConfig(Package) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (res) { return __awaiter(_this, void 0, void 0, function () {
                    var hasConfig, answer, _a, _b, _c, _d;
                    return __generator(this, function (_e) {
                        switch (_e.label) {
                            case 0: return [4 /*yield*/, suf_node_1.Exits(CONFIG_PATH)];
                            case 1:
                                hasConfig = _e.sent();
                                if (!!hasConfig) return [3 /*break*/, 6];
                                logger_1.logger.Log('info', 'No config Found, do you want to create one? ', '[Y/n]');
                                return [4 /*yield*/, suf_node_1.getYNAnswer()];
                            case 2:
                                answer = _e.sent();
                                if (!answer) return [3 /*break*/, 4];
                                _a = res;
                                return [4 /*yield*/, CreateOrUpdateConfig(Package)];
                            case 3:
                                _a.apply(void 0, [_e.sent()]);
                                return [3 /*break*/, 5];
                            case 4:
                                process.exit();
                                _e.label = 5;
                            case 5: return [3 /*break*/, 8];
                            case 6:
                                _b = res;
                                _d = (_c = JSON).parse;
                                return [4 /*yield*/, fs_1.promises.readFile(CONFIG_PATH)];
                            case 7:
                                _b.apply(void 0, [_d.apply(_c, [(_e.sent()).toString()])]);
                                _e.label = 8;
                            case 8: return [2 /*return*/];
                        }
                    });
                }); })];
        });
    });
}
exports.getConfig = getConfig;
function CreateOrUpdateConfig(Package, type, CONFIG) {
    return __awaiter(this, void 0, void 0, function () {
        var path, config, updateOrCreate, _a, _b, _c, _d, _i, key, ConfigFunc, _e, _f;
        var _g, _h;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    path = './suf.config.json';
                    updateOrCreate = 'Update';
                    if (!type) return [3 /*break*/, 2];
                    logger_1.logger.Log('info', "Adding " + type + " to Config.");
                    _a = [__assign({}, CONFIG)];
                    _g = {};
                    _b = type;
                    return [4 /*yield*/, GetConfigFuncs[type](Package)];
                case 1:
                    config = __assign.apply(void 0, _a.concat([(_g[_b] = _j.sent(), _g)]));
                    return [3 /*break*/, 7];
                case 2:
                    /**this will only be executed when there is no config. */
                    config = {};
                    updateOrCreate = 'Create';
                    _c = [];
                    for (_d in GetConfigFuncs)
                        _c.push(_d);
                    _i = 0;
                    _j.label = 3;
                case 3:
                    if (!(_i < _c.length)) return [3 /*break*/, 7];
                    key = _c[_i];
                    if (!GetConfigFuncs.hasOwnProperty(key)) return [3 /*break*/, 6];
                    ConfigFunc = GetConfigFuncs[key];
                    logger_1.logger.Log('info', "Add " + key + " to Config?", '[Y/n]');
                    return [4 /*yield*/, suf_node_1.getYNAnswer()];
                case 4:
                    if (!_j.sent()) return [3 /*break*/, 6];
                    _e = [__assign({}, config)];
                    _h = {};
                    _f = key;
                    return [4 /*yield*/, ConfigFunc(Package)];
                case 5:
                    config = __assign.apply(void 0, _e.concat([(_h[_f] = _j.sent(), _h)]));
                    _j.label = 6;
                case 6:
                    _i++;
                    return [3 /*break*/, 3];
                case 7:
                    console.log(log_1.styler(updateOrCreate + " CONFIG", logger_1.colors.blue) + ": " + path);
                    fs_1.promises.writeFile(path, JSON.stringify(config, null, 2));
                    return [2 /*return*/, config];
            }
        });
    });
}
exports.CreateOrUpdateConfig = CreateOrUpdateConfig;
var GetConfigFuncs = {
    badges: function (Package) { return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = {};
                    return [4 /*yield*/, getInp('Name', 'PACKAGE NAME', Package.name)];
                case 1:
                    _a.name = _b.sent();
                    return [4 /*yield*/, getInp('Github', 'Username')];
                case 2:
                    _a.github = _b.sent();
                    return [4 /*yield*/, getInp('Github', 'Repo', Package.name)];
                case 3:
                    _a.repo = _b.sent();
                    return [4 /*yield*/, getInp('out', 'OUTPUT PATH', 'README.md')];
                case 4:
                    _a.out = _b.sent();
                    return [4 /*yield*/, getBadges()];
                case 5: return [2 /*return*/, (_a.badges = __spreadArrays.apply(void 0, [(_b.sent())]),
                        _a)];
            }
        });
    }); },
    tsDoc: function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = {};
                    return [4 /*yield*/, getInp('title', 'TITLE', 'Docs')];
                case 1:
                    _a.title = _b.sent();
                    return [4 /*yield*/, getInp('dir', 'INPUT PATH', 'dist')];
                case 2:
                    _a.dir = _b.sent();
                    return [4 /*yield*/, getInp('out', 'OUTPUT PATH', 'README.md')];
                case 3: return [2 /*return*/, (_a.out = _b.sent(),
                        _a)];
            }
        });
    }); },
    license: function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = {};
                    return [4 /*yield*/, getInp('name', 'FULL NAME(S)')];
                case 1:
                    _a.name = _b.sent();
                    return [4 /*yield*/, getLicenseType()];
                case 2:
                    _a.type = _b.sent();
                    return [4 /*yield*/, getInp('year', 'YEAR', new Date().getFullYear().toString())];
                case 3:
                    _a.year = _b.sent();
                    return [4 /*yield*/, getInp('out', 'OUTPUT PATH', 'README.md')];
                case 4:
                    _a.out = _b.sent();
                    return [4 /*yield*/, getInp('file', 'LICENSE FILE PATH', 'LICENSE')];
                case 5: return [2 /*return*/, (_a.file = _b.sent(),
                        _a)];
            }
        });
    }); }
};
function getLicenseType() {
    return __awaiter(this, void 0, void 0, function () {
        var licenses;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    process.stdout.write(log_1.styler('Getting Licenses from api...\n', logger_1.colors.gray));
                    return [4 /*yield*/, node_fetch_1.default('https://api.github.com/licenses')];
                case 1: return [4 /*yield*/, (_a.sent()).json()];
                case 2:
                    licenses = _a.sent();
                    process.stdout.write(log_1.styler('Choose From: ' +
                        JSON.stringify(licenses.map(function (l) { return l.key; }), null, 2).replace(/[\[\]",]/g, ''), logger_1.colors.gray));
                    return [4 /*yield*/, getInp('type', 'LICENSE', 'mit')];
                case 3: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
function getInp(type, type2, _default) {
    return __awaiter(this, void 0, void 0, function () {
        var input;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    process.stdout.write(log_1.styler(type, logger_1.colors.blue));
                    process.stdout.write(log_1.styler(" " + type2, logger_1.colors.yellow));
                    process.stdout.write(log_1.styler(': ', logger_1.colors.gray));
                    if (!_default) return [3 /*break*/, 2];
                    process.stdout.write(log_1.styler("(" + _default + ") ", logger_1.colors.gray));
                    return [4 /*yield*/, suf_node_1.readConsole()];
                case 1:
                    input = _a.sent();
                    if (input.length === 0) {
                        return [2 /*return*/, _default];
                    }
                    return [2 /*return*/, input];
                case 2: return [2 /*return*/, suf_node_1.readConsole()];
            }
        });
    });
}
function getBadges(out) {
    return __awaiter(this, void 0, void 0, function () {
        var input;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!out) {
                        out = [];
                        process.stdout.write(log_1.styler('Press Enter to Accept. ', logger_1.colors.info));
                        process.stdout.write(log_1.styler('Format: ', logger_1.colors.gray));
                        process.stdout.write(log_1.styler('BADGE ', logger_1.colors.blue));
                        process.stdout.write(log_1.styler('LINK ', logger_1.colors.yellow));
                        process.stdout.write(log_1.styler('Parameters?\n', logger_1.colors.gray));
                    }
                    process.stdout.write(log_1.styler('Add', logger_1.colors.blue));
                    process.stdout.write(log_1.styler(' Badge', logger_1.colors.yellow));
                    process.stdout.write(log_1.styler(': ', logger_1.colors.gray));
                    return [4 /*yield*/, suf_node_1.readConsole()];
                case 1:
                    input = _a.sent();
                    if (!/^e$|^end$|^$/i.test(input)) return [3 /*break*/, 2];
                    if (input) {
                        out.push(input);
                    }
                    return [2 /*return*/, out];
                case 2:
                    if (input) {
                        out.push(input);
                    }
                    return [4 /*yield*/, getBadges(out)];
                case 3: return [2 /*return*/, _a.sent()];
            }
        });
    });
}

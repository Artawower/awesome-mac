"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TsDoc = void 0;
var suf_node_1 = require("suf-node");
var fs_1 = require("fs");
var path_1 = require("path");
var logger_1 = require("./logger");
var utility_marker_1 = require("./utility.marker");
var utility_baseClass_1 = require("./utility.baseClass");
var codeBlock = '```';
var TsDoc = /** @class */ (function (_super) {
    __extends(TsDoc, _super);
    function TsDoc(STATE) {
        var _this = _super.call(this) || this;
        _this.STATE = STATE;
        _this.operators = {
            '!==': function (a, b) {
                return a !== b;
            },
            '===': function (a, b) {
                return a === b;
            }
        };
        _this.run();
        return _this;
    }
    TsDoc.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var CONFIG, filesPaths, input, declarationRegex, rawText, navLinks, _i, filesPaths_1, path, fileText, fileName, m, res, all, comment, declaration, type, name_1, content;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.STATE.getConfig('tsDoc')];
                    case 1:
                        CONFIG = (_a.sent());
                        return [4 /*yield*/, this.getPaths(CONFIG)];
                    case 2:
                        filesPaths = _a.sent();
                        input = utility_marker_1.getMarkedInput(CONFIG.out, 'tsDoc');
                        declarationRegex = /(\/\*\*[\S\s]*? \*\/\n)?export (declare|interface) ([\w-]*) ([\w-]*)(.*?;|[\S\s]*?^})/gm;
                        rawText = '';
                        navLinks = [];
                        for (_i = 0, filesPaths_1 = filesPaths; _i < filesPaths_1.length; _i++) {
                            path = filesPaths_1[_i];
                            fileText = fs_1.readFileSync(path).toString();
                            fileName = path.replace(/.*(\/|\\\\)([\w\.-]*)\.d\.ts/, '$2');
                            m = void 0;
                            if (!fileName.endsWith('.internal')) {
                                navLinks.push("#" + fileName);
                                res = "\n### " + fileName + "\n";
                                while ((m = declarationRegex.exec(fileText)) !== null) {
                                    if (m.index === declarationRegex.lastIndex) {
                                        declarationRegex.lastIndex++;
                                    }
                                    all = m[0], comment = m[1], declaration = m[2], type = m[3], name_1 = m[4], content = m[5];
                                    if (!/^[\n \t]*internal[\n \t]*/i.test(getComment(comment))) {
                                        navLinks.push(declaration === 'interface' ? type : name_1);
                                        res += "\n##### " + (declaration === 'interface' ? type : name_1) + "\n\n" + codeBlock + "typescript\n" + all.replace(/export ?| ?declare ?/g, '') + "\n" + codeBlock + "\n";
                                    }
                                }
                                rawText += res;
                            }
                        }
                        return [4 /*yield*/, fs_1.promises.writeFile(CONFIG.out, input.replace(utility_marker_1.insertionMarker.regex, utility_marker_1.getGenerated("\n# " + CONFIG.title + "\n" + this.createNav(navLinks) + rawText, 'tsDoc')))];
                    case 3:
                        _a.sent();
                        logger_1.logger.Log('info', 'Generated Docs at ', CONFIG.out);
                        if (this._res) {
                            this._res();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    TsDoc.prototype.createNav = function (links) {
        var linkRes = '';
        for (var _i = 0, links_1 = links; _i < links_1.length; _i++) {
            var link = links_1[_i];
            if (link.startsWith('#')) {
                linkRes += "\n- **[" + link.replace(/#/, '') + "](" + link.toLowerCase() + ")**\n\n";
            }
            else {
                linkRes += "  - [" + link + "](#" + link.toLowerCase() + ")\n";
            }
        }
        return linkRes;
    };
    TsDoc.prototype.getPaths = function (CONFIG) {
        return __awaiter(this, void 0, void 0, function () {
            var dir, isInclude, type, checkArr, operator, filesPaths;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, suf_node_1.Walk("./" + CONFIG.dir)];
                    case 1:
                        dir = _a.sent();
                        if (CONFIG.exclude !== undefined && CONFIG.include !== undefined) {
                            logger_1.logger.Log('error', '[suf-cli:tsDoc] Cannot use option "include" and "exclude" at the same time, all d.ts files will be used.');
                            return [2 /*return*/, dir.filter(function (fileName) { return fileName.endsWith('d.ts'); })];
                        }
                        isInclude = CONFIG.include !== undefined ? CONFIG.include.length === 0 : true;
                        type = isInclude ? 'exclude' : 'include';
                        checkArr = CONFIG[type] || [];
                        operator = this.operators[isInclude ? '===' : '!=='];
                        filesPaths = dir.filter(function (fileName) {
                            return fileName.endsWith('d.ts') &&
                                operator(checkArr.indexOf(path_1.basename(fileName).replace(/\.d\.ts$/, '')), -1);
                        });
                        return [2 /*return*/, filesPaths];
                }
            });
        });
    };
    return TsDoc;
}(utility_baseClass_1.BaseCliClass));
exports.TsDoc = TsDoc;
function getComment(comment) {
    return comment ? comment.replace(/\/?\*\*?\/?/g, '') : '';
}

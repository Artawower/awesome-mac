"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Exits = exports.Walk = void 0;
var tslib_1 = require("tslib");
var fs_1 = require("fs");
var path_1 = require("path");
/**
 * Returns an array with all the file names in the given directory
 */
function Walk(dir) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (_resolve, reject) {
                    var results = [];
                    fs_1.readdir(dir, function (err, list) {
                        if (err)
                            return reject(err);
                        var pending = list.length;
                        var completed = true;
                        if (!pending) {
                            return _resolve(list);
                        }
                        list.forEach(function (file) {
                            file = path_1.resolve(dir, file);
                            fs_1.stat(file, function (err, stat) {
                                return tslib_1.__awaiter(this, void 0, void 0, function () {
                                    var a;
                                    return tslib_1.__generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                if (err)
                                                    return [2 /*return*/, reject(err)];
                                                if (!(stat && stat.isDirectory())) return [3 /*break*/, 2];
                                                completed = false;
                                                return [4 /*yield*/, Walk(file)];
                                            case 1:
                                                a = _a.sent();
                                                results.push.apply(results, a);
                                                if (!--pending) {
                                                    return [2 /*return*/, _resolve(results)];
                                                }
                                                return [3 /*break*/, 3];
                                            case 2:
                                                results.push(file);
                                                if (!--pending && completed) {
                                                    return [2 /*return*/, _resolve(results)];
                                                }
                                                _a.label = 3;
                                            case 3: return [2 /*return*/];
                                        }
                                    });
                                });
                            });
                        });
                    });
                })];
        });
    });
}
exports.Walk = Walk;
function Exits(path) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (res) {
                    fs_1.exists(path, function (exists) {
                        res(exists);
                    });
                })];
        });
    });
}
exports.Exits = Exits;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getColumn = exports.pad = exports.removeStyles = exports.maxTableColumnLength = exports.getBrowserStyle = exports.ANSICodes = exports.stringColorToAnsiColor = exports.SetLoggerEnvironment = exports.defaultLogTableOptions = exports.isBrowser = void 0;
var s_color_1 = require("s.color");
exports.isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';
exports.defaultLogTableOptions = { padding: 0, spacing: 1 };
/**
 * Can be used to change the assumed environment
 */
function SetLoggerEnvironment(env) {
    exports.isBrowser = env === 'browser';
}
exports.SetLoggerEnvironment = SetLoggerEnvironment;
function stringColorToAnsiColor(type, color) {
    if (!color) {
        return undefined;
    }
    var _a = s_color_1.StringToRGB(color, true), r = _a.r, g = _a.g, b = _a.b;
    return ANSICodes(type) + "2;" + r + ";" + g + ";" + b + ";";
}
exports.stringColorToAnsiColor = stringColorToAnsiColor;
function ANSICodes(type) {
    switch (type) {
        case 'reset':
            return '0';
        case 'bold':
            return '1;';
        case 'color':
            return '38;';
        case 'background':
            return '48;';
    }
}
exports.ANSICodes = ANSICodes;
function getBrowserStyle(style) {
    if (typeof style === 'string') {
        return { color: style };
    }
    return style ? style : '';
}
exports.getBrowserStyle = getBrowserStyle;
function maxTableColumnLength(column) {
    var max = 0;
    for (var i = 0; i < column.length; i++) {
        var field = column[i];
        if (field) {
            var length_1 = removeStyles(typeof field === 'object' ? field.message : field).length;
            max = length_1 > max ? length_1 : max;
        }
    }
    return max;
}
exports.maxTableColumnLength = maxTableColumnLength;
function removeStyles(item) {
    return item.toString().replace(/[\033\x1b\u001b]\[.*?m/g, '');
}
exports.removeStyles = removeStyles;
function pad(text, start, end) {
    var space = function (amount) { return ' '.repeat(amount); };
    return "" + space(start) + text + space(end);
}
exports.pad = pad;
function getColumn(matrix, col) {
    return matrix.map(function (row) { return row[col]; });
}
exports.getColumn = getColumn;
// function convertToANSI256Color(color: string) {
//   const { r, g, b } = StringToRGB(color, true);
//   if (r === g && g === b) {
//     if (r < 8) {
//       return 16;
//     }
//     if (r > 248) {
//       return 231;
//     }
//     return Math.round(((r - 8) / 247) * 24) + 232;
//   }
//   return (
//     16 + 36 * Math.round((r / 255) * 5) + 6 * Math.round((g / 255) * 5) + Math.round((b / 255) * 5)
//   );
// }
// function ConvertHexString(text: string): [number, number, number] {
//   let color = { red: 0, green: 0, blue: 0, alpha: 0 };
//   const raw = text.replace('#', '');
//   const length = raw.length;
//   const modulo = length % 3;
//   color.red =
//     length > 4
//       ? parseInt(raw.substring(0, 2), 16)
//       : parseInt(raw.substring(0, 1).concat(raw.substring(0, 1)), 16);
//   color.green =
//     length > 4
//       ? parseInt(raw.substring(2, 4), 16)
//       : parseInt(raw.substring(1, 2).concat(raw.substring(1, 2)), 16);
//   color.blue =
//     length > 4
//       ? parseInt(raw.substring(4, 6), 16)
//       : parseInt(raw.substring(2, 3).concat(raw.substring(2, 3)), 16);
//   if (modulo) {
//     color.alpha =
//       length > 4
//         ? parseInt(raw.substring(length - modulo, length), 16)
//         : parseInt(
//             raw.substring(length - modulo, length).concat(raw.substring(length - modulo, length)),
//             16
//           );
//     color.alpha = color.alpha;
//   } else {
//     color.alpha = 1;
//   }
//   return [color.red, color.green, color.blue];
// }

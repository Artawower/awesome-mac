"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeString = exports.handleBracketSpacing = exports.isMultilineInterpolation = exports.isQuoted = exports.unwrapLineFeeds = exports.previousNormalAttributeToken = void 0;
function previousNormalAttributeToken(tokens, index) {
    for (let i = index - 1; i > 0; i--) {
        const token = tokens[i];
        if (token.type === 'start-attributes') {
            return;
        }
        if (token.type === 'attribute') {
            if (token.name !== 'class' && token.name !== 'id') {
                return token;
            }
        }
    }
    return;
}
exports.previousNormalAttributeToken = previousNormalAttributeToken;
function unwrapLineFeeds(value) {
    return value.includes('\n')
        ? value
            .split('\n')
            .map((part) => part.trim())
            .map((part) => (part[0] === '.' ? '' : ' ') + part)
            .join('')
            .trim()
        : value;
}
exports.unwrapLineFeeds = unwrapLineFeeds;
function isQuoted(val) {
    return /^["'](.*)["']$/.test(val);
}
exports.isQuoted = isQuoted;
function isMultilineInterpolation(val) {
    return /^`[\s\S]*`$/m.test(val) && val.includes('\n');
}
exports.isMultilineInterpolation = isMultilineInterpolation;
function handleBracketSpacing(bracketSpacing, code) {
    return bracketSpacing ? `{{ ${code} }}` : `{{${code}}}`;
}
exports.handleBracketSpacing = handleBracketSpacing;
function makeString(rawContent, enclosingQuote, unescapeUnnecessaryEscapes = false) {
    const otherQuote = enclosingQuote === '"' ? "'" : '"';
    const newContent = rawContent.replace(/\\([\s\S])|(['"])/g, (match, escaped, quote) => {
        if (escaped === otherQuote) {
            return escaped;
        }
        if (quote === enclosingQuote) {
            return `\\${quote}`;
        }
        if (quote) {
            return quote;
        }
        return unescapeUnnecessaryEscapes && /^[^\\nrvtbfux\r\n\u2028\u2029"'0-7]$/.test(escaped)
            ? escaped
            : `\\${escaped}`;
    });
    return enclosingQuote + newContent + enclosingQuote;
}
exports.makeString = makeString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxTQUFnQiw0QkFBNEIsQ0FBQyxNQUE0QixFQUFFLEtBQWE7SUFDdkYsS0FBSyxJQUFJLENBQUMsR0FBVyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDM0MsTUFBTSxLQUFLLEdBQVUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9CLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxrQkFBa0IsRUFBRTtZQUN0QyxPQUFPO1NBQ1A7UUFDRCxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssV0FBVyxFQUFFO1lBQy9CLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxPQUFPLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7Z0JBQ2xELE9BQU8sS0FBSyxDQUFDO2FBQ2I7U0FDRDtLQUNEO0lBQ0QsT0FBTztBQUNSLENBQUM7QUFiRCxvRUFhQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxLQUFhO0lBQzVDLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDMUIsQ0FBQyxDQUFDLEtBQUs7YUFDSixLQUFLLENBQUMsSUFBSSxDQUFDO2FBQ1gsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDMUIsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO2FBQ2xELElBQUksQ0FBQyxFQUFFLENBQUM7YUFDUixJQUFJLEVBQUU7UUFDVCxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ1YsQ0FBQztBQVRELDBDQVNDO0FBcUNELFNBQWdCLFFBQVEsQ0FBQyxHQUFXO0lBQ25DLE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFGRCw0QkFFQztBQUVELFNBQWdCLHdCQUF3QixDQUFDLEdBQVc7SUFDbkQsT0FBTyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkQsQ0FBQztBQUZELDREQUVDO0FBUUQsU0FBZ0Isb0JBQW9CLENBQUMsY0FBdUIsRUFBRSxJQUFZO0lBQ3pFLE9BQU8sY0FBYyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDO0FBQ3pELENBQUM7QUFGRCxvREFFQztBQUdELFNBQWdCLFVBQVUsQ0FDekIsVUFBa0IsRUFDbEIsY0FBeUIsRUFDekIsNkJBQXNDLEtBQUs7SUFFM0MsTUFBTSxVQUFVLEdBQWMsY0FBYyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDakUsTUFBTSxVQUFVLEdBQVcsVUFBVSxDQUFDLE9BQU8sQ0FDNUMsb0JBQW9CLEVBQ3BCLENBQUMsS0FBSyxFQUFFLE9BQWtCLEVBQUUsS0FBZ0IsRUFBRSxFQUFFO1FBQy9DLElBQUksT0FBTyxLQUFLLFVBQVUsRUFBRTtZQUMzQixPQUFPLE9BQU8sQ0FBQztTQUNmO1FBQ0QsSUFBSSxLQUFLLEtBQUssY0FBYyxFQUFFO1lBQzdCLE9BQU8sS0FBSyxLQUFLLEVBQUUsQ0FBQztTQUNwQjtRQUNELElBQUksS0FBSyxFQUFFO1lBQ1YsT0FBTyxLQUFLLENBQUM7U0FDYjtRQUNELE9BQU8sMEJBQTBCLElBQUksc0NBQXNDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUN4RixDQUFDLENBQUMsT0FBTztZQUNULENBQUMsQ0FBQyxLQUFLLE9BQU8sRUFBRSxDQUFDO0lBQ25CLENBQUMsQ0FDRCxDQUFDO0lBQ0YsT0FBTyxjQUFjLEdBQUcsVUFBVSxHQUFHLGNBQWMsQ0FBQztBQUNyRCxDQUFDO0FBeEJELGdDQXdCQyJ9
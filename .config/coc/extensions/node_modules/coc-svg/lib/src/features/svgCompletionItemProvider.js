"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var coc_nvim_1 = require("coc.nvim");
var vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
var svg_1 = require("./svg");
var utils = tslib_1.__importStar(require("./utils"));
var svg = null;
var colors = 'aliceblue,antiquewhite,aqua,aquamarine,azure,beige,bisque,black,blanchedalmond,blue,blueviolet,brown,burlywood,cadetblue,chartreuse,chocolate,coral,cornflowerblue,cornsilk,crimson,cyan,darkblue,darkcyan,darkgoldenrod,darkgray,darkgreen,darkgrey,darkkhaki,darkmagenta,darkolivegreen,darkorange,darkorchid,darkred,darksalmon,darkseagreen,darkslateblue,darkslategray,darkslategrey,darkturquoise,darkviolet,deeppink,deepskyblue,dimgray,dimgrey,dodgerblue,firebrick,floralwhite,forestgreen,fuchsia,gainsboro,ghostwhite,gold,goldenrod,gray,grey,green,greenyellow,honeydew,hotpink,indianred,indigo,ivory,khaki,lavender,lavenderblush,lawngreen,lemonchiffon,lightblue,lightcoral,lightcyan,lightgoldenrodyellow,lightgray,lightgreen,lightgrey,lightpink,lightsalmon,lightseagreen,lightskyblue,lightslategray,lightslategrey,lightsteelblue,lightyellow,lime,limegreen,linen,magenta,maroon,mediumaquamarine,mediumblue,mediumorchid,mediumpurple,mediumseagreen,mediumslateblue,mediumspringgreen,mediumturquoise,mediumvioletred,midnightblue,mintcream,mistyrose,moccasin,navajowhite,navy,oldlace,olive,olivedrab,orange,orangered,orchid,palegoldenrod,palegreen,paleturquoise,palevioletred,papayawhip,peachpuff,peru,pink,plum,powderblue,purple,red,rosybrown,royalblue,saddlebrown,salmon,sandybrown,seagreen,seashell,sienna,silver,skyblue,slateblue,slategray,slategrey,snow,springgreen,steelblue,tan,teal,thistle,tomato,turquoise,violet,wheat,white,whitesmoke,yellow,yellowgreen'.split(',');
var SVGCompletionItemProvider = /** @class */ (function () {
    function SVGCompletionItemProvider() {
        this.insertCloseTagSign = true;
        this.showAdvanced = false;
        this.showDeprecated = false;
        if (svg == null) {
            svg = svg_1.getSvgJson();
        }
        var self = this;
        coc_nvim_1.workspace.onDidChangeConfiguration(function () {
            self.updateConfiguration();
        });
        this.updateConfiguration();
    }
    SVGCompletionItemProvider.prototype.updateConfiguration = function () {
        var svgConf = coc_nvim_1.workspace.getConfiguration('svg.completion');
        this.insertCloseTagSign = svgConf.get('insertCloseTagSign');
        this.showAdvanced = svgConf.get("showAdvanced");
        this.showDeprecated = svgConf.get("showDeprecated");
    };
    /**
     * 创建一个新的自动完成项。
     */
    SVGCompletionItemProvider.prototype.createCompletionItem = function (element, ele) {
        var item = {
            label: element,
            kind: vscode_languageserver_protocol_1.CompletionItemKind.Class
        };
        if (ele.deprecated) {
            item.detail = 'DEPRECATED';
            if (!this.showDeprecated) {
                return null;
            }
        }
        if (ele.documentation) {
            item.documentation = ele.documentation;
            if (ele.deprecated) {
                item.documentation = ele.documentation + '\n\n**DEPRECATED**';
            }
        }
        var snippetString = element;
        // BUILD SnippetString
        var i = 1;
        if (ele.defaultAttributes) {
            for (var attr in ele.defaultAttributes) {
                snippetString += ' ' + attr + '="${' + i + ':' + ele.defaultAttributes[attr] + '}"';
                i += 1;
            }
        }
        if (this.insertCloseTagSign) {
            if (ele.simple === true) {
                if (i === 1) {
                    snippetString += '${0} />';
                }
                else {
                    snippetString += '${' + i + '} />${0}';
                }
            }
            else if (ele.inline === true) {
                snippetString += '>${0}</' + element + '>';
            }
            else {
                snippetString += '>\n\t${0}\n</' + element + '>';
            }
        }
        else {
            if (ele.simple === true) {
                if (i === 1) {
                    snippetString += '${0} /';
                }
                else {
                    snippetString += '${' + i + '}${0} /';
                }
            }
            else if (ele.inline === true) {
                snippetString += '>${0}</' + element + '';
            }
            else {
                snippetString += '>\n\t${0}\n</' + element;
            }
        }
        // snippet
        item.insertTextFormat = vscode_languageserver_protocol_1.InsertTextFormat.Snippet;
        item.insertText = snippetString;
        return item;
    };
    /**
     * 创建一个新的属性完成项。
     */
    SVGCompletionItemProvider.prototype.createAttributeCompletionItem = function (attr, svgAttr) {
        var item = {
            label: attr,
            kind: vscode_languageserver_protocol_1.CompletionItemKind.Property
        };
        if (svgAttr == undefined && svg.attributes[attr]) {
            svgAttr = svg.attributes[attr];
        }
        if (svgAttr) {
            if (svgAttr.deprecated) {
                item.detail = 'DEPRECATED';
                if (!this.showDeprecated) {
                    return null;
                }
            }
            if (svgAttr.documentation) {
                item.documentation = svgAttr.documentation;
                if (svgAttr.deprecated) {
                    item.documentation = svgAttr.documentation + '\n\n**DEPRECATED**';
                }
            }
            if (svgAttr.type) {
                item.detail = svgAttr.type;
            }
        }
        item.insertTextFormat = vscode_languageserver_protocol_1.InsertTextFormat.Snippet;
        item.insertText = item.label + "=\"${1}\"${0}";
        return item;
    };
    /**
     * 创建一个新的属性值完成项
     */
    SVGCompletionItemProvider.prototype.createEnumCompletionItems = function (item) {
        var items = [];
        if (item.enum) {
            item.enum.forEach(function (e) {
                var label = (typeof e == 'string') ? e : e.name;
                if (label && label.startsWith('<')) {
                    return;
                }
                var citem = {
                    label: label,
                    kind: vscode_languageserver_protocol_1.CompletionItemKind.Enum
                };
                if (typeof e == 'object') {
                    citem.documentation = e.documentation;
                }
                items.push(citem);
            });
        }
        if (/^(color|fill|stroke|paint)$/.test(item.type)) {
            colors.forEach(function (c) {
                items.push({
                    label: c,
                    kind: vscode_languageserver_protocol_1.CompletionItemKind.Enum
                });
            });
        }
        return items;
    };
    /**
     * 完成选项入口方法
     */
    SVGCompletionItemProvider.prototype.provideCompletionItems = function (document, position, token) {
        var prevChar = document.getText(vscode_languageserver_protocol_1.Range.create(utils.translateRange(position, 0, -1), position));
        var nextChar = document.getText(vscode_languageserver_protocol_1.Range.create(position, utils.translateRange(position, 0, 1)));
        var nextChars = document.getText(vscode_languageserver_protocol_1.Range.create(position, vscode_languageserver_protocol_1.Position.create(position.line + 1, 0))).replace(/^[^="']+/, '');
        // tag name
        if (prevChar === '<') {
            return this.provideTagItems(document, position, token);
            // property name
        }
        else if (prevChar !== ' ' && !/["']/.test(nextChars[0]) && /[\/>\s]/.test(nextChar)) {
            return this.provideAttributesItems(document, position, token);
            // property value
        }
        else if (prevChar === '"' || prevChar === "'" || prevChar === '=' || /["']/.test(nextChars[0])) {
            return this.provideEnumItems(document, position, token);
        }
        return null;
    };
    /**
     * 提供属性值的自动完成选项
     */
    SVGCompletionItemProvider.prototype.provideEnumItems = function (document, position, token) {
        var attrMatchInfo = utils.getInAttirubte(token, document, position);
        if (attrMatchInfo) {
            //console.log('attrMatchInfo', attrMatchInfo.tagName, attrMatchInfo.attrName);
            var ele = svg.elements[attrMatchInfo.tagName];
            if (ele) {
                var attr = ele.attributes.find(function (i) { return (typeof i !== 'string') && i.name === attrMatchInfo.attrName; });
                if (attr) {
                    return this.createEnumCompletionItems(attr);
                }
                attr = svg.attributes[attrMatchInfo.attrName];
                if (attr) {
                    return this.createEnumCompletionItems(attr);
                }
            }
        }
        return undefined;
    };
    /**
     * 提供属性名称的自动完成选项
     */
    SVGCompletionItemProvider.prototype.provideAttributesItems = function (document, position, token) {
        var items = [];
        var startTag = utils.getInStartTag(token, document, position);
        if (startTag && svg.elements[startTag.tagName]) {
            var attributes = svg.elements[startTag.tagName].attributes;
            if (attributes) {
                for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {
                    var attr = attributes_1[_i];
                    var name = typeof attr == 'string' ? attr : attr.name;
                    // 测试是否已定义此属性
                    if (startTag.tagAttrs.indexOf(" " + name + "=") > -1) {
                        continue;
                    }
                    if (typeof attr == 'string') {
                        attr = svg.attributes[name];
                    }
                    if (typeof attr == 'object') {
                        var item = this.createAttributeCompletionItem(attr.name, attr);
                        if (item) {
                            items.push(item);
                        }
                    }
                    else {
                        items.push(this.createAttributeCompletionItem(name));
                    }
                }
            }
        }
        return items;
    };
    /**
     * 提供标签的自动完成选项
     */
    SVGCompletionItemProvider.prototype.provideTagItems = function (document, position, token) {
        var items = [];
        var prevTag = utils.getPrevTag(document, position);
        var parentTag = utils.getParentTag(token, document, position);
        if (prevTag === undefined) {
            var ele = svg.elements['svg'];
            var item = this.createCompletionItem('svg', ele);
            if (this.insertCloseTagSign) {
                item.textEdit = vscode_languageserver_protocol_1.TextEdit.insert(position, "svg${1} xmlns=\"http://www.w3.org/2000/svg\">\n\t${0}\n</svg>");
            }
            else {
                item.textEdit = vscode_languageserver_protocol_1.TextEdit.insert(position, "svg${1} xmlns=\"http://www.w3.org/2000/svg\">\n\t${0}\n</svg");
            }
            return [item];
        }
        if (parentTag) {
            var parentEle = svg.elements[parentTag.tagName];
            if (parentEle.subElements) {
                for (var _i = 0, _a = parentEle.subElements; _i < _a.length; _i++) {
                    var subElement = _a[_i];
                    var item = this.createCompletionItem(subElement, svg.elements[subElement]);
                    if (item) {
                        items.push(item);
                    }
                }
                return items;
            }
        }
        for (var element in svg.elements) {
            var item = this.createCompletionItem(element, svg.elements[element]);
            if (item) {
                items.push(item);
            }
        }
        return items;
    };
    return SVGCompletionItemProvider;
}());
exports.SVGCompletionItemProvider = SVGCompletionItemProvider;
//# sourceMappingURL=svgCompletionItemProvider.js.map
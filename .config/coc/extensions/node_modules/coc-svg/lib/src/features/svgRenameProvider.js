"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var coc_nvim_1 = require("coc.nvim");
var vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
var utils = tslib_1.__importStar(require("./utils"));
var SvgRenameProvider = /** @class */ (function () {
    function SvgRenameProvider() {
    }
    SvgRenameProvider.prototype.showNonameMessage = function () {
        coc_nvim_1.workspace.showMessage('Rename only work in tag name, id attribute or #id.');
    };
    SvgRenameProvider.prototype.calcRange = function (document, start, size) {
        if (typeof start == 'number') {
            var startPos = document.positionAt(start);
            var endPos = document.positionAt(start + size);
            return vscode_languageserver_protocol_1.Range.create(startPos, endPos);
        }
        else {
            return this.calcRange(document, document.offsetAt(start), size);
        }
    };
    SvgRenameProvider.prototype.provideIdRename = function (document, oldId, newId, token) {
        var _a;
        var body = document.getText();
        var regex = new RegExp("((id=[\"']" + oldId + "[\"'])|(url\\(#" + oldId + "\\))|(href=[\"']#" + oldId + "[\"']))", 'g');
        var textEdits = [];
        var exp = null;
        while (!token.isCancellationRequested && (exp = regex.exec(body))) {
            if (exp[2]) {
                textEdits.push({
                    range: this.calcRange(document, exp.index + 4, oldId.length),
                    newText: newId
                });
            }
            else if (exp[3]) {
                textEdits.push({
                    range: this.calcRange(document, exp.index + 5, oldId.length),
                    newText: newId
                });
            }
            else if (exp[4]) {
                textEdits.push({
                    range: this.calcRange(document, exp.index + 7, oldId.length),
                    newText: newId
                });
            }
        }
        if (textEdits.length) {
            return {
                changes: (_a = {},
                    _a[document.uri] = textEdits,
                    _a)
            };
        }
        return null;
    };
    SvgRenameProvider.prototype.provideRenameStartTag = function (document, position, oldName, newName) {
        var _a;
        var level = 0;
        var body = document.getText();
        var offset = document.offsetAt(position);
        var tagInfo = null;
        var textEdits = [];
        while (tagInfo = utils.getPrevTagFromOffset(body, offset)) {
            if (!tagInfo.tagName.startsWith('/') && !tagInfo.simple) {
                level--;
                if (level <= 0) {
                    textEdits.push({
                        range: this.calcRange(document, tagInfo.index + 1, oldName.length),
                        newText: newName
                    });
                    textEdits.push({
                        range: this.calcRange(document, position, oldName.length),
                        newText: newName
                    });
                    break;
                }
            }
            else if (tagInfo.tagName.startsWith('/')) {
                level++;
            }
            offset = tagInfo.index - 2;
        }
        return {
            changes: (_a = {},
                _a[document.uri] = textEdits,
                _a)
        };
    };
    SvgRenameProvider.prototype.provideRenameEndTag = function (document, position, oldName, newName) {
        var _a;
        var level = 0;
        var body = document.getText();
        var startOffset = document.offsetAt(position);
        var offset = startOffset + oldName.length;
        var tagInfo = null;
        var textEdits = [];
        while (tagInfo = utils.getNextTagFromOffset(body, offset)) {
            // console.log('tagInfo', tagInfo.tagName);
            if (!tagInfo.tagName.startsWith('/') && !tagInfo.simple) {
                level++;
            }
            else if (tagInfo.tagName.startsWith('/')) {
                level--;
                if (level <= 0) {
                    textEdits.push({
                        range: this.calcRange(document, tagInfo.index + 2, oldName.length),
                        newText: newName
                    });
                    textEdits.push({
                        range: this.calcRange(document, position, oldName.length),
                        newText: newName
                    });
                    break;
                }
            }
            offset = tagInfo.index + oldName.length;
        }
        return {
            changes: (_a = {},
                _a[document.uri] = textEdits,
                _a)
        };
    };
    SvgRenameProvider.prototype.provideRenameEdits = function (document, position, newName, token) {
        var doc = coc_nvim_1.workspace.getDocument(document.uri);
        // TODO: getWordRangeAtPosition regex pattern support
        var wordRange = doc.getWordRangeAtPosition(position, '(<\/)<#_');
        if (wordRange && !utils.isRangeEmpty(wordRange)) {
            var word = document.getText(wordRange);
            // console.log('word', word);
            if (word.startsWith('</')) {
                return this.provideRenameStartTag(document, utils.translateRange(wordRange.start, 0, 2), word.substr(2), newName);
            }
            else if (word.startsWith('/')) {
                return this.provideRenameStartTag(document, utils.translateRange(wordRange.start, 0, 1), word.substr(1), newName);
            }
            else if (word.startsWith('<')) {
                return this.provideRenameEndTag(document, utils.translateRange(wordRange.start, 0, 1), word.substr(1), newName);
            }
            else if (word.startsWith('#')) {
                return this.provideIdRename(document, word.substr(1), newName, token);
            }
            else if (word.startsWith('url(#')) {
                return this.provideIdRename(document, word.slice(5, -1), newName, token);
            }
            else {
                // TODO: /id="[a-zA-Z0-9_]+"/ regex pattern
                wordRange = doc.getWordRangeAtPosition(position, '=_"');
                if (wordRange && !utils.isRangeEmpty(wordRange)) {
                    var word_1 = document.getText(wordRange);
                    if (/id=["'][a-zA-Z0-9_]+["']/.test(word_1)) {
                        return this.provideIdRename(document, word_1.slice(4, -1), newName, token);
                    }
                }
            }
        }
        return null;
    };
    return SvgRenameProvider;
}());
exports.SvgRenameProvider = SvgRenameProvider;
//# sourceMappingURL=svgRenameProvider.js.map
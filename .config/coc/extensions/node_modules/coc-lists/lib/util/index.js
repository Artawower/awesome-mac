"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const which_1 = __importDefault(require("which"));
const path_1 = __importDefault(require("path"));
function executable(cmd) {
    try {
        which_1.default.sync(cmd);
    }
    catch (e) {
        return false;
    }
    return true;
}
exports.executable = executable;
function characterIndex(content, byteIndex) {
    let buf = Buffer.from(content, 'utf8');
    return buf.slice(0, byteIndex).toString('utf8').length;
}
exports.characterIndex = characterIndex;
function wait(ms) {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve();
        }, ms);
    });
}
exports.wait = wait;
function pad(n, total) {
    let l = total - n.length;
    if (l <= 0)
        return '';
    return ((new Array(l)).fill(' ').join(''));
}
exports.pad = pad;
/**
 * Removes duplicates from the given array. The optional keyFn allows to specify
 * how elements are checked for equalness by returning a unique string for each.
 */
function distinct(array, keyFn) {
    if (!keyFn) {
        return array.filter((element, position) => {
            return array.indexOf(element) === position;
        });
    }
    const seen = Object.create(null);
    return array.filter(elem => {
        const key = keyFn(elem);
        if (seen[key]) {
            return false;
        }
        seen[key] = true;
        return true;
    });
}
exports.distinct = distinct;
function isParentFolder(folder, filepath) {
    let rel = path_1.default.relative(folder, filepath);
    return !rel.startsWith('..');
}
exports.isParentFolder = isParentFolder;
//# sourceMappingURL=index.js.map
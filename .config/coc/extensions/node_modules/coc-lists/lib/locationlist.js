"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const vscode_uri_1 = require("vscode-uri");
const util_1 = require("./util");
class LocationList extends coc_nvim_1.BasicList {
    constructor(nvim) {
        super(nvim);
        this.name = 'locationlist';
        this.defaultAction = 'open';
        this.description = 'locationlist of current window';
        this.addLocationActions();
    }
    async loadItems(context) {
        let { nvim } = this;
        let { window } = context;
        let valid = await window.valid;
        if (!valid)
            return [];
        let list = await nvim.call('getloclist', [window.id]);
        if (list.length == 0)
            return [];
        let res = [];
        let buf = await context.window.buffer;
        let bufnr = buf.id;
        let ignoreFilepath = list.every(o => o.bufnr && bufnr && o.bufnr == bufnr);
        for (let item of list) {
            let { bufnr, col, text, type, lnum } = item;
            if (type == 'E') {
                type = 'Error';
            }
            else if (type == 'W') {
                type = 'Warning';
            }
            let bufname = await nvim.call('bufname', bufnr);
            let fullpath = await nvim.call('fnamemodify', [bufname, ':p']);
            let uri = vscode_uri_1.URI.file(fullpath).toString();
            let line = await coc_nvim_1.workspace.getLine(uri, lnum - 1);
            let pos = vscode_languageserver_protocol_1.Position.create(lnum - 1, util_1.characterIndex(line, col - 1));
            res.push({
                label: `${ignoreFilepath ? '' : bufname} |${type ? type + ' ' : ''}${lnum} col ${col}| ${text}`,
                location: vscode_languageserver_protocol_1.Location.create(uri, vscode_languageserver_protocol_1.Range.create(pos, pos)),
                filterText: `${ignoreFilepath ? '' : bufname}${text}`
            });
        }
        return res;
    }
    doHighlight() {
        let { nvim } = this;
        nvim.pauseNotification();
        nvim.command('syntax match CocLocationlistName /\\v^[^|]+/ contained containedin=CocLocationlistLine', true);
        nvim.command('syntax match CocLocationlistPosition /\\v\\|\\w*\\s?\\d+\\scol\\s\\d+\\|/ contained containedin=CocLocationlistLine', true);
        nvim.command('syntax match CocLocationlistError /Error/ contained containedin=CocLocationlistPosition', true);
        nvim.command('syntax match CocLocationlistWarning /Warning/ contained containedin=CocLocationlistPosition', true);
        nvim.command('highlight default link CocLocationlistName Directory', true);
        nvim.command('highlight default link CocLocationlistPosition LineNr', true);
        nvim.command('highlight default link CocLocationlistError Error', true);
        nvim.command('highlight default link CocLocationlistWarning WarningMsg', true);
        nvim.resumeNotification().catch(_e => {
            // noop
        });
    }
}
exports.default = LocationList;
//# sourceMappingURL=locationlist.js.map